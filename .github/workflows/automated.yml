name: Automated Deployment

on:
  push:
    branches:
      - master

jobs:
  about:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Jaid/action-sync-node-meta
        uses: jaid/action-sync-node-meta@v1.4.0
        with:
          direction: overwrite-github # default is overwrite-file
          githubToken: ${{ secrets.GITHUB }}

  docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: update documentation
        uses: CoCreate-app/CoCreate-docs@master

  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v2
        id: semantic
        with:
          # You can specify specifying version range for the extra plugins if you prefer.
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/npm
            @semantic-release/git
            @semantic-release/github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }} # Auto Changog generator
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}

  # package:
  #   runs-on: ubuntu-latest
  #   needs: release
  #   if: needs.release.outputs.new_release_published == 'true'
  #   env:
  #     IMAGE: docker.pkg.github.com/cocreate-app/cocreate-node-autoscaler/node-autoscaler
  #     VERSION: ${{ needs.release.outputs.new_release_version }}
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v1

  #     - name: npm login
  #       env:
  #         NPM_TOKEN: ${{ secrets.NPM_TOKEN }} 
  #       run: >
  #         echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >
  #         .npmrc
  #     - name: Login docker registry
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: |
  #         docker login docker.pkg.github.com -u ${GITHUB_ACTOR} -p ${GITHUB_TOKEN}

  #     - name: Build docker image
  #       run: docker build . -t ${IMAGE}:latest -t ${IMAGE}:${VERSION}

  #     - name: Push docker image
  #       run: |
  #         docker push ${IMAGE}:latest
  #         docker push ${IMAGE}:${VERSION}
  build:
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.new_release_published == 'true'
    env:
      IMAGE: cocreateapps/cocreate-aws-keepalived
      VERSION: ${{ needs.release.outputs.new_release_version }}
    steps:
    - uses: actions/checkout@v2
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
    - name: docker build
      id: docker_build
      run: docker build . -t ${IMAGE}:latest -t ${IMAGE}:${VERSION}
    - name: docker push
      id: docker_push
      run: |
        docker push ${IMAGE}:latest
        docker push ${IMAGE}:${VERSION}

  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Setup kubectl with empty input kubeconfig
      uses: ThomasKliszowski/setup-kubectl@v1
      with:
        kube-config: ${{ secrets.KUBECONFIG }}
        kube-version: 1.19.9
    - name: Check installed kubectl
      run: |
        kubectl version
    - name: Check and persist kubeconfig
      id: step_kubeconfig
      run: |
        kubectl config view
    - name: Checkout local repo
      uses: actions/checkout@v2.3.4
    - name: Deploy aws secret
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWSACCESSKEYID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWSSECERTACCESSKEY }}
      run: |
        ENCODE_ID=$(echo ${AWS_ACCESS_KEY_ID} | tr -d '\n' | base64 | tr -d '\n')
        sed -i "s/{{ AWS_ACCESS_KEY_ID }}/${ENCODE_ID}/g" ${GITHUB_WORKSPACE}/manifests/aws-secret.yaml
        ENCODE_KEY=$(echo ${AWS_SECRET_ACCESS_KEY} | tr -d '\n' | base64 | tr -d '\n')
        sed -i "s/{{ AWS_SECRET_ACCESS_KEY }}/${ENCODE_KEY}/g" ${GITHUB_WORKSPACE}/manifests/aws-secret.yaml
        echo
        echo "********** Deploy secret ************"
        echo
        kubectl apply -f ${GITHUB_WORKSPACE}/manifests/aws-secret.yaml

    - name: Deploy keepalived
      env:
        ALL_PPERS_IP: ${{ secrets.PRIVATEIPS }}
        EIP_ALLOC_ID: ${{ secrets.EIPALLOC }}
        AWS_DEFAULT_REGION: aws-east-1
        PRIMARY_NIC_NAME: ens5
      run: |
        set -e
        echo
        echo "*********** All peers IP: ${ALL_PPERS_IP} **********"
        echo "*********** AWS default region: ${AWS_DEFAULT_REGION} **********"
        echo "*********** Primary NIC: ${PRIMARY_NIC_NAME} **********"
        echo
        sed -i "s/{{ ALL_PPERS_IP }}/${ALL_PPERS_IP}/g" ${GITHUB_WORKSPACE}/manifests/aws-keepalived-manifests.yaml
        sed -i "s/{{ EIP_ALLOC_ID }}/${EIP_ALLOC_ID}/g" ${GITHUB_WORKSPACE}/manifests/aws-keepalived-manifests.yaml
        sed -i "s/{{ AWS_DEFAULT_REGION }}/${AWS_DEFAULT_REGION}/g" ${GITHUB_WORKSPACE}/manifests/aws-keepalived-manifests.yaml
        sed -i "s/{{ PRIMARY_NIC_NAME }}/${PRIMARY_NIC_NAME}/g" ${GITHUB_WORKSPACE}/manifests/aws-keepalived-manifests.yaml
        echo
        echo "********** Deploy keepalived ************"
        echo
        kubectl apply -f ${GITHUB_WORKSPACE}/manifests/aws-keepalived-manifests.yaml -o yaml
        kubectl -n ingress-haproxy rollout restart ds aws-keepalived
 
